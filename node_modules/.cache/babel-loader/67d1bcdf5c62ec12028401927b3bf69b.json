{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    // this is just an empty list\n    // as new items are added to the card\n    // an object with this structure will be altered\n    // {\n    //     ItemID: '',\n    //     ItemQuantity: int\n    // }\n    cartList: []\n  },\n  reducers: {\n    add: (state, action) => {\n      // instead of having item checking logic here I should \n      // make a utility class that checks if the item exists in the cart\n      // then decides which reducer to use\n      //state.cartList.push({item:'this',quantity:1})\n      state.cartList.push(action.payload);\n    },\n    remove: state => {\n      console.log('remove reducer not completed');\n    },\n    increment: (state, action) => {\n      state.cartList.forEach(element => {\n        if (element.item._id === action.payload.item.item._id) {\n          element.quantity = action.payload.quantity;\n        } else {\n          console.log('not found');\n        }\n      });\n    },\n    decrement: state => {\n      console.log('here in dec');\n    },\n    manualChange: state => {\n      console.log('here in manualChange');\n    },\n    clear: state => {\n      console.log('here in clear');\n      state.cartList = [];\n    },\n    checkout: state => {\n      console.log('here in checkout');\n    }\n  }\n});\nexport const {\n  add,\n  remove,\n  increment,\n  decrement,\n  manualChange,\n  clear,\n  checkout\n} = cartSlice.actions;\nexport const getCart = state => state.cart.cartList;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/jak/Desktop/Codes/MERN/ShoppingCart/frontend/src/slices/cartSlice.js"],"names":["createSlice","cartSlice","name","initialState","cartList","reducers","add","state","action","push","payload","remove","console","log","increment","forEach","element","item","_id","quantity","decrement","manualChange","clear","checkout","actions","getCart","cart","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAE;AAClCE,EAAAA,IAAI,EAAE,MAD4B;AAElCC,EAAAA,YAAY,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE;AARA,GAFoB;AAYlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpB;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,QAAN,CAAeK,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH,KAPK;AAQNC,IAAAA,MAAM,EAAEJ,KAAK,IAAI;AACbK,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEH,KAXK;AAYNC,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAOC,MAAP,KAAkB;AAEzBD,MAAAA,KAAK,CAACH,QAAN,CAAeW,OAAf,CAAuBC,OAAO,IAAI;AAC9B,YAAGA,OAAO,CAACC,IAAR,CAAaC,GAAb,KAAmBV,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBA,IAApB,CAAyBC,GAA/C,EACA;AACIF,UAAAA,OAAO,CAACG,QAAR,GAAiBX,MAAM,CAACE,OAAP,CAAeS,QAAhC;AACH,SAHD,MAII;AAACP,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAAyB;AACjC,OAND;AAOH,KArBK;AAsBNO,IAAAA,SAAS,EAAEb,KAAK,IAAI;AAChBK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEH,KAzBK;AA0BNQ,IAAAA,YAAY,EAAEd,KAAK,IAAI;AACnBK,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEH,KA7BK;AA8BNS,IAAAA,KAAK,EAAEf,KAAK,IAAI;AACZK,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAN,MAAAA,KAAK,CAACH,QAAN,GAAe,EAAf;AAEH,KAlCK;AAmCNmB,IAAAA,QAAQ,EAAEhB,KAAK,IAAI;AACfK,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAtCK;AAZwB,CAAF,CAA7B;AAsDP,OAAO,MAAM;AAAEP,EAAAA,GAAF;AAAOK,EAAAA,MAAP;AAAeG,EAAAA,SAAf;AAA0BM,EAAAA,SAA1B;AAAqCC,EAAAA,YAArC;AAAmDC,EAAAA,KAAnD;AAA0DC,EAAAA;AAA1D,IAAsEtB,SAAS,CAACuB,OAAtF;AAEP,OAAO,MAAMC,OAAO,GAAGlB,KAAK,IAAIA,KAAK,CAACmB,IAAN,CAAWtB,QAApC;AAEP,eAAeH,SAAS,CAAC0B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const cartSlice = createSlice ({\n    name: 'cart',\n    initialState: {\n        // this is just an empty list\n        // as new items are added to the card\n        // an object with this structure will be altered\n        // {\n        //     ItemID: '',\n        //     ItemQuantity: int\n        // }\n        cartList: [],\n    },\n    reducers: {\n        add: (state, action) => {\n            // instead of having item checking logic here I should \n            // make a utility class that checks if the item exists in the cart\n            // then decides which reducer to use\n            //state.cartList.push({item:'this',quantity:1})\n            state.cartList.push(action.payload);\n        },\n        remove: state => {\n            console.log('remove reducer not completed')\n            \n        },\n        increment: (state,action) => {\n\n            state.cartList.forEach(element => {\n                if(element.item._id===action.payload.item.item._id)\n                {\n                    element.quantity=action.payload.quantity\n                }\n                else{console.log('not found')}\n            });\n        },\n        decrement: state => {\n            console.log('here in dec');\n            \n        },\n        manualChange: state => {\n            console.log('here in manualChange');\n            \n        },\n        clear: state => {\n            console.log('here in clear');\n            state.cartList=[]\n\n        },\n        checkout: state => {\n            console.log('here in checkout');\n            \n        },\n    },\n});\n\nexport const { add, remove, increment, decrement, manualChange, clear, checkout} = cartSlice.actions;\n\nexport const getCart = state => state.cart.cartList;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}