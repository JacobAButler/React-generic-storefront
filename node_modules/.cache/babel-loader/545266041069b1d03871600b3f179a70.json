{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { internet } from 'faker';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    // this is just an empty list\n    // as new items are added to the card\n    // an object with this structure will be altered\n    // {\n    //     ItemID: '',\n    //     ItemQuantity: int\n    // }\n    cartList: [],\n    totalCost: 0\n  },\n  reducers: {\n    add: (state, action) => {\n      state.cartList.push(action.payload);\n      let costOfItem = action.payload.item.product_price * action.payload.quantity;\n      state.totalCost += costOfItem;\n    },\n    remove: state => {\n      console.log('remove reducer not completed');\n    },\n    increment: (state, action) => {\n      state.cartList.forEach(element => {\n        if (element.item._id === action.payload.item.item._id) {\n          // find out the cost of the product and how many the user has in the cart\n          // multiply them to get its total cost in the cart\n          let currentCost = element.item.product_price * element.quantity; // remove this amount from the cart\n\n          state.totalCost -= currentCost; // set the new quantity in the cart\n\n          element.quantity = action.payload.quantity; // add the new total to the cart total\n\n          let newCost = element.item.product_price * element.quantity;\n          state.totalCost += newCost;\n        } else {\n          console.log('not found');\n        }\n      });\n    },\n    decrement: state => {\n      console.log('here in dec');\n    },\n    manualChange: state => {\n      console.log('here in manualChange');\n    },\n    clear: state => {\n      console.log('here in clear');\n      state.cartList = [];\n    },\n    checkout: state => {\n      console.log('here in checkout');\n    }\n  }\n});\nexport const {\n  add,\n  remove,\n  increment,\n  decrement,\n  manualChange,\n  clear,\n  checkout\n} = cartSlice.actions;\nexport const getCart = state => state.cart.cartList;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/jak/Desktop/Codes/MERN/ShoppingCart/frontend/src/slices/cartSlice.js"],"names":["createSlice","internet","cartSlice","name","initialState","cartList","totalCost","reducers","add","state","action","push","payload","costOfItem","item","product_price","quantity","remove","console","log","increment","forEach","element","_id","currentCost","newCost","decrement","manualChange","clear","checkout","actions","getCart","cart","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAE;AAClCG,EAAAA,IAAI,EAAE,MAD4B;AAElCC,EAAAA,YAAY,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,EARA;AASVC,IAAAA,SAAS,EAAE;AATD,GAFoB;AAalCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEpBD,MAAAA,KAAK,CAACJ,QAAN,CAAeM,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACA,UAAIC,UAAU,GAAGH,MAAM,CAACE,OAAP,CAAeE,IAAf,CAAoBC,aAApB,GAAkCL,MAAM,CAACE,OAAP,CAAeI,QAAlE;AACAP,MAAAA,KAAK,CAACH,SAAN,IAAiBO,UAAjB;AAEH,KAPK;AAQNI,IAAAA,MAAM,EAAER,KAAK,IAAI;AACbS,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEH,KAXK;AAYNC,IAAAA,SAAS,EAAE,CAACX,KAAD,EAAOC,MAAP,KAAkB;AAEzBD,MAAAA,KAAK,CAACJ,QAAN,CAAegB,OAAf,CAAuBC,OAAO,IAAI;AAC9B,YAAGA,OAAO,CAACR,IAAR,CAAaS,GAAb,KAAmBb,MAAM,CAACE,OAAP,CAAeE,IAAf,CAAoBA,IAApB,CAAyBS,GAA/C,EACA;AACI;AACA;AACA,cAAIC,WAAW,GAACF,OAAO,CAACR,IAAR,CAAaC,aAAb,GAA2BO,OAAO,CAACN,QAAnD,CAHJ,CAII;;AACAP,UAAAA,KAAK,CAACH,SAAN,IAAiBkB,WAAjB,CALJ,CAOI;;AACAF,UAAAA,OAAO,CAACN,QAAR,GAAiBN,MAAM,CAACE,OAAP,CAAeI,QAAhC,CARJ,CAUI;;AACA,cAAIS,OAAO,GAAGH,OAAO,CAACR,IAAR,CAAaC,aAAb,GAA2BO,OAAO,CAACN,QAAjD;AACAP,UAAAA,KAAK,CAACH,SAAN,IAAiBmB,OAAjB;AACH,SAdD,MAeI;AAACP,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAAyB;AACjC,OAjBD;AAkBH,KAhCK;AAiCNO,IAAAA,SAAS,EAAEjB,KAAK,IAAI;AAChBS,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEH,KApCK;AAqCNQ,IAAAA,YAAY,EAAElB,KAAK,IAAI;AACnBS,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEH,KAxCK;AAyCNS,IAAAA,KAAK,EAAEnB,KAAK,IAAI;AACZS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAV,MAAAA,KAAK,CAACJ,QAAN,GAAe,EAAf;AAEH,KA7CK;AA8CNwB,IAAAA,QAAQ,EAAEpB,KAAK,IAAI;AACfS,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAjDK;AAbwB,CAAF,CAA7B;AAkEP,OAAO,MAAM;AAAEX,EAAAA,GAAF;AAAOS,EAAAA,MAAP;AAAeG,EAAAA,SAAf;AAA0BM,EAAAA,SAA1B;AAAqCC,EAAAA,YAArC;AAAmDC,EAAAA,KAAnD;AAA0DC,EAAAA;AAA1D,IAAsE3B,SAAS,CAAC4B,OAAtF;AAEP,OAAO,MAAMC,OAAO,GAAGtB,KAAK,IAAIA,KAAK,CAACuB,IAAN,CAAW3B,QAApC;AAEP,eAAeH,SAAS,CAAC+B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { internet } from 'faker';\n\nexport const cartSlice = createSlice ({\n    name: 'cart',\n    initialState: {\n        // this is just an empty list\n        // as new items are added to the card\n        // an object with this structure will be altered\n        // {\n        //     ItemID: '',\n        //     ItemQuantity: int\n        // }\n        cartList: [],\n        totalCost: 0,\n    },\n    reducers: {\n        add: (state, action) => {\n\n            state.cartList.push(action.payload);\n            let costOfItem = action.payload.item.product_price*action.payload.quantity;\n            state.totalCost+=costOfItem;\n\n        },\n        remove: state => {\n            console.log('remove reducer not completed')\n            \n        },\n        increment: (state,action) => {\n\n            state.cartList.forEach(element => {\n                if(element.item._id===action.payload.item.item._id)\n                {\n                    // find out the cost of the product and how many the user has in the cart\n                    // multiply them to get its total cost in the cart\n                    let currentCost=element.item.product_price*element.quantity;\n                    // remove this amount from the cart\n                    state.totalCost-=currentCost;\n\n                    // set the new quantity in the cart\n                    element.quantity=action.payload.quantity\n\n                    // add the new total to the cart total\n                    let newCost = element.item.product_price*element.quantity;\n                    state.totalCost+=newCost;\n                }\n                else{console.log('not found')}\n            });\n        },\n        decrement: state => {\n            console.log('here in dec');\n            \n        },\n        manualChange: state => {\n            console.log('here in manualChange');\n            \n        },\n        clear: state => {\n            console.log('here in clear');\n            state.cartList=[]\n\n        },\n        checkout: state => {\n            console.log('here in checkout');\n            \n        },\n    },\n});\n\nexport const { add, remove, increment, decrement, manualChange, clear, checkout} = cartSlice.actions;\n\nexport const getCart = state => state.cart.cartList;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}