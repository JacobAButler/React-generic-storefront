{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    // this is just an empty list\n    // as new items are added to the card\n    // an object with this structure will be altered\n    // {\n    //     ItemID: '',\n    //     ItemQuantity: int\n    // }\n    cartList: []\n  },\n  reducers: {\n    add: (state, action) => {\n      // instead of having item checking logic here I should \n      // make a utility class that checks if the item exists in the cart\n      // then decides which reducer to use\n      //state.cartList.push({item:'this',quantity:1})\n      state.cartList.push(action.payload);\n    },\n    remove: state => {},\n    increment: (state, action) => {\n      console.log('here in inc');\n      console.log('number is: ', action.payload.quantity);\n      console.log('item id is:', action.payload.item.item._id);\n      console.log(state.cartList[0]);\n      state.cartList.forEach(element => {\n        console.log('element', element);\n      }); //state.cartList[action.payload.item.item._id].quantity=action.payload.quantity;\n      // let id = action.payload.item._id;\n      // state.cartList[id] += action.payload.quantity;\n    },\n    decrement: state => {\n      console.log('here in dec');\n    },\n    manualChange: state => {\n      console.log('here in manualChange');\n    },\n    clear: state => {\n      console.log('here in clear');\n    },\n    checkout: state => {\n      console.log('here in checkout');\n    }\n  }\n});\nexport const {\n  add,\n  remove,\n  increment,\n  decrement,\n  manualChange,\n  clear,\n  checkout\n} = cartSlice.actions;\nexport const getCart = state => state.cart.cartList;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/jak/Desktop/Codes/MERN/ShoppingCart/frontend/src/slices/cartSlice.js"],"names":["createSlice","cartSlice","name","initialState","cartList","reducers","add","state","action","push","payload","remove","increment","console","log","quantity","item","_id","forEach","element","decrement","manualChange","clear","checkout","actions","getCart","cart","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAE;AAClCE,EAAAA,IAAI,EAAE,MAD4B;AAElCC,EAAAA,YAAY,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE;AARA,GAFoB;AAYlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpB;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,QAAN,CAAeK,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH,KAPK;AAQNC,IAAAA,MAAM,EAAEJ,KAAK,IAAI,CAEhB,CAVK;AAWNK,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAOC,MAAP,KAAkB;AACzBK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BN,MAAM,CAACE,OAAP,CAAeK,QAAzC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BN,MAAM,CAACE,OAAP,CAAeM,IAAf,CAAoBA,IAApB,CAAyBC,GAAnD;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACH,QAAN,CAAe,CAAf,CAAZ;AACAG,MAAAA,KAAK,CAACH,QAAN,CAAec,OAAf,CAAuBC,OAAO,IAAI;AAC9BN,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBK,OAAtB;AACH,OAFD,EALyB,CAQzB;AACA;AACA;AACH,KAtBK;AAuBNC,IAAAA,SAAS,EAAEb,KAAK,IAAI;AAChBM,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEH,KA1BK;AA2BNO,IAAAA,YAAY,EAAEd,KAAK,IAAI;AACnBM,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEH,KA9BK;AA+BNQ,IAAAA,KAAK,EAAEf,KAAK,IAAI;AACZM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAEH,KAlCK;AAmCNS,IAAAA,QAAQ,EAAEhB,KAAK,IAAI;AACfM,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAtCK;AAZwB,CAAF,CAA7B;AAsDP,OAAO,MAAM;AAAER,EAAAA,GAAF;AAAOK,EAAAA,MAAP;AAAeC,EAAAA,SAAf;AAA0BQ,EAAAA,SAA1B;AAAqCC,EAAAA,YAArC;AAAmDC,EAAAA,KAAnD;AAA0DC,EAAAA;AAA1D,IAAsEtB,SAAS,CAACuB,OAAtF;AAEP,OAAO,MAAMC,OAAO,GAAGlB,KAAK,IAAIA,KAAK,CAACmB,IAAN,CAAWtB,QAApC;AAEP,eAAeH,SAAS,CAAC0B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const cartSlice = createSlice ({\n    name: 'cart',\n    initialState: {\n        // this is just an empty list\n        // as new items are added to the card\n        // an object with this structure will be altered\n        // {\n        //     ItemID: '',\n        //     ItemQuantity: int\n        // }\n        cartList: [],\n    },\n    reducers: {\n        add: (state, action) => {\n            // instead of having item checking logic here I should \n            // make a utility class that checks if the item exists in the cart\n            // then decides which reducer to use\n            //state.cartList.push({item:'this',quantity:1})\n            state.cartList.push(action.payload);\n        },\n        remove: state => {\n            \n        },\n        increment: (state,action) => {\n            console.log('here in inc');\n            console.log('number is: ',action.payload.quantity)\n            console.log('item id is:',action.payload.item.item._id)\n            console.log(state.cartList[0])\n            state.cartList.forEach(element => {\n                console.log('element',element)\n            });\n            //state.cartList[action.payload.item.item._id].quantity=action.payload.quantity;\n            // let id = action.payload.item._id;\n            // state.cartList[id] += action.payload.quantity;\n        },\n        decrement: state => {\n            console.log('here in dec');\n            \n        },\n        manualChange: state => {\n            console.log('here in manualChange');\n            \n        },\n        clear: state => {\n            console.log('here in clear');\n\n        },\n        checkout: state => {\n            console.log('here in checkout');\n            \n        },\n    },\n});\n\nexport const { add, remove, increment, decrement, manualChange, clear, checkout} = cartSlice.actions;\n\nexport const getCart = state => state.cart.cartList;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}